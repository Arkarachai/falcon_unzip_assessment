disease_severity[50]=8
STR_repeat_number[20]=80
life_span[911]=50
dataset=data.frame(STR_repeat_number,geneA,disease_severity,life_span)
# stat analysis
summary(dataset)
set.seed(123)
geneA=rnorm(1000,100,10)
geneB=geneA+0.3*rnorm(1000,100,10)-0.3*rnorm(1000,100,10)
STR_repeat_number=round(geneA+0.2*rnorm(1000,100,10)-0.8*rnorm(1000,100,10))
patientID=paste('ID000',1:1000,sep="")
disease_severity=round(0.03*(geneA+geneB))
life_span=135-round(geneB-10)
disease_severity[50]=8
STR_repeat_number[20]=80
life_span[911]=50
dataset=data.frame(STR_repeat_number,geneA,disease_severity,life_span)
# stat analysis
summary(dataset)
model=lm(life_span~STR_repeat_number,data=dataset)
summary(model)
model=lm(life_span~.,data=dataset)
summary(model)
vif(model)
library(car)
vif(model)
p=plot_ly(x = STR_repeat_number, y = geneA, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
scene = list(
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression")))
p
head(dataset)
set.seed(123)
geneA_expression=rnorm(1000,100,10)
geneB=geneA_expression+0.3*rnorm(1000,100,10)-0.3*rnorm(1000,100,10)
STR_repeat_number=round(geneA_expression+0.2*rnorm(1000,100,10)-0.8*rnorm(1000,100,10))
patientID=paste('ID000',1:1000,sep="")
disease_severity=round(0.03*(geneA_expression+geneB))
life_span=135-round(geneB-10)
disease_severity[50]=8
STR_repeat_number[20]=80
life_span[911]=50
dataset=data.frame(STR_repeat_number,geneA_expression,disease_severity,life_span)
head(dataset)
# stat analysis
summary(dataset)
model=lm(life_span~STR_repeat_number,data=dataset)
summary(model)
#model=lm(life_span~.,data=dataset)
#summary(model)
#library(car)
#vif(model)
#plot
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
scene = list(
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression")))
p
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, z = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span')
p
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, z = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
scene = list(
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression")
zaxis = list(title = "life span")))
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, z = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
scene = list(
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression"),
zaxis = list(title = "life span")))
p
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
scene = list(
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression")))
p
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, z = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
scene = list(
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression"),
zaxis = list(title = "life span")))
p
library(plotly)
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "x Axis",
titlefont = f
)
y <- list(
title = "y Axis",
titlefont = f
)
p <- plot_ly(x = rnorm(10), y = rnorm(10), mode = "markers") %>%
layout(xaxis = x, yaxis = y)
p
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression")))
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity, and life span',
xaxis = list(title = "STR number"),
yaxis = list(title = "geneA expression"))
p
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity (color), and life span (size)',
xaxis = list(title = "STR repeat number"),
yaxis = list(title = "geneA expression"))
p
shiny::runApp('Rstack/N50_calculator')
runApp('Rstack/severity_group')
set.seed(123)
geneA_expression=rnorm(1000,100,10)
geneB=geneA_expression+0.3*rnorm(1000,100,10)-0.3*rnorm(1000,100,10)
STR_repeat_number=round(geneA_expression+0.2*rnorm(1000,100,10)-0.8*rnorm(1000,100,10))
patientID=paste('ID000',1:1000,sep="")
disease_severity=round(0.03*(geneA_expression+geneB))
life_span=135-round(geneB-10)
disease_severity[50]=8
STR_repeat_number[20]=80
life_span[911]=50
dataset=data.frame(STR_repeat_number,geneA_expression,disease_severity,life_span)
head(dataset)
# stat analysis
summary(dataset)
summary(disease_severity)
set.seed(123)
geneA_expression=rnorm(1000,100,10)
geneB=geneA_expression+0.3*rnorm(1000,100,10)-0.3*rnorm(1000,100,10)
STR_repeat_number=round(geneA_expression+0.2*rnorm(1000,100,10)-0.8*rnorm(1000,100,10))
patientID=paste('ID000',1:1000,sep="")
disease_severity=round(0.03*(geneA_expression+geneB))-3
life_span=135-round(geneB-10)
disease_severity[50]=8
STR_repeat_number[20]=80
life_span[911]=50
dataset=data.frame(STR_repeat_number,geneA_expression,disease_severity,life_span)
head(dataset)
t
#2D
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity (color), and life span (size)',
xaxis = list(title = "STR repeat number"),
yaxis = list(title = "geneA expression"))
p
# making data
set.seed(123)
geneA_expression=rnorm(1000,100,10)
geneB=geneA_expression+0.3*rnorm(1000,100,10)-0.3*rnorm(1000,100,10)
STR_repeat_number=round(geneA_expression+0.2*rnorm(1000,100,10)-0.8*rnorm(1000,100,10))
patientID=paste('ID000',1:1000,sep="")
disease_severity=round(0.03*(geneA_expression+geneB))
life_span=135-round(geneB-10)
disease_severity[50]=8
STR_repeat_number[20]=80
life_span[911]=50
dataset=data.frame(STR_repeat_number,geneA_expression,disease_severity,life_span)
head(dataset)
# stat analysis
summary(dataset)
model=lm(life_span~STR_repeat_number,data=dataset)
summary(model)
#model=lm(life_span~.,data=dataset)
#summary(model)
#library(car)
vif(model)
#plot
#2D
p=plot_ly(x = STR_repeat_number, y = geneA_expression, text = paste("patientID: ", patientID),
mode = "markers", color = disease_severity, size = life_span) %>%
layout(title='STR repeat number, geneA expression, disease severity (color), and life span (size)',
xaxis = list(title = "STR repeat number"),
yaxis = list(title = "geneA expression"))
p
runApp('Rstack/severity_group')
runApp('Rstack/severity_group')
install.packages("devtools")
devtools::install_github("rstudio/keras")
library(keras)
install_tensorflow()
data<-dataset_mnist()
head(data)
type(data)
class(data)
typeof(data)
train_x<-data$train$x
train_y<-data$train$y
test_x<-data$test$x
test_y<-data$test$y
rm(data)
train_x <- array(train_x, dim = c(dim(train_x)[1], prod(dim(train_x)[-1]))) / 255
test_x <- array(test_x, dim = c(dim(test_x)[1], prod(dim(test_x)[-1]))) / 255
getwd()
getwd()
setwd('/Users/chai/github/cells/users/chai/assembly_util/Ashkenazi_first_draft/visualize_falcon_unzip_phasing/resources/home/dnanexus')
dataset=read.table('box_plot_boundary_size')
head(dataset)
random_error=dataset[dataset$V1=='random_error',]
mis_join=dataset[dataset$V1=='mis_join',]
plot(random_error$V2,random_error$V3)
plot(mis_join$V2,mis_join$V3)
dataset=read.table('boundary_size_vs_location')
head(dataset)
random_error=dataset[dataset$V1=='random_error',]
mis_join=dataset[dataset$V1=='mis_join',]
plot(random_error$V2,random_error$V3)
plot(mis_join$V2,mis_join$V3)
plot(random_error$V2,random_error$V3)
plot(random_error$V2,random_error$V3,pch='.')
glm=glm(random_error$V3~random_error$V2)
summary(glm)
model=lm(random_error$V3~random_error$V2)
abline(model)
summary(model)
loess_fit <- loess(random_error$V3~random_error$V2)
lines(random_error$V2, predict(loess_fit), col = "blue")
tice)
xyplot(random_error$V3 ~ random_erro
xyplot(random_error$V3 ~ random_error$V2, type=c("smooth", "p"))
xyplot(random_error$V3 ~ random_error$V2, type=c("smooth", "p"))
library(lattice)
xyplot(random_error$V3 ~ random_error$V2, type=c("smooth", "p"))
xyplot(random_error$V3 ~ random_error$V2, type=c("smooth", "p"),col='r')
xyplot(random_error$V3 ~ random_error$V2, type=c("smooth", "p"),col='r')
xyplot(random_error$V3 ~ random_error$V2, type=c("smooth", "p"),col='red')
xyplot(random_error$V3 ~ random_error$V2)
xyplot(random_error$V3 ~ random_error$V2, type=c("smooth", "p"),col='red')
xyplot(random_error$V3 ~ random_error$V2)
library(lattice)
panel_fn <- function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.xyplot(x, y, type="smooth", col="red", ...)
}
xyplot(random_error$V3 ~ random_error$V2,panel=panel_fn)
xyplot(random_error$V3 ~ random_error$V2,panel=panel_fn)
xyplot(random_error$V3 ~ random_error$V2,panel=panel_fn)
lines(random_error$V2, predict(loess_fit), col = "blue")
plot(random_error$V2,random_error$V3,pch='.')
xyplot(random_error$V3 ~ random_error$V2,panel=panel_fn)
getwd()
dataset=read.table('boundary_size_vs_location')
head(dataset)
random_error=dataset[dataset$V1=='random_error',]
mis_join=dataset[dataset$V1=='mis_join',]
plot(random_error$V2,random_error$V4,pch='.')
plot(random_error$V3,random_error$V4,pch='.')
plot(random_error$V2,random_error$V4,pch='.')
plot(random_error$V3,random_error$V4,pch='.')
plot(random_error$V3,random_error$V4,pch='.')
plot(random_error$V2,random_error$V4,pch='.')
hist(random_error$V2)
plot(random_error$V2,random_error$V4,pch='.')
boxplot(random_error$V4)
plot(random_error$V2,random_error$V4,pch='.')
l=lm(random_error$V4~random_error$V2)
abline(model)
loess_fit <- loess(random_error$V4~random_error$V2)
lines(random_error$V2, predict(loess_fit), col = "blue")
panel_fn <- function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.xyplot(x, y, type="smooth", col="red", ...)
}
xyplot(random_error$V4 ~ random_error$V2,panel=panel_fn)
plot(mis_join$V2,mis_join$V4,pch='.')
library(lattice)
panel_fn <- function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.xyplot(x, y, type="smooth", col="red", ...)
}
xyplot(random_error$V4 ~ random_error$V2,panel=panel_fn)
plot(mis_join$V2,mis_join$V4,pch='.')
xyplot(random_error$V4 ~ random_error$V2,panel=panel_fn)
hist(random_error$V2)
plot(random_error$V2,random_error$V4,pch='.')
dataset=read.table('boundary_size_vs_location')
head(dataset)
colnames(dataset)=c('class','n_start_position','n_end_position','end_position','distance','edge')
random_error=dataset[dataset$class=='random_error',]
mis_join=dataset[dataset$class=='mis_join',]
plot(random_error$n_end_position,random_error$distance,pch='.')
hist(random_error$n_end_position)
hist(random_error$n_start_position)
hist(random_error$n_end_position)
hist(random_error$n_start_position)
hist(random_error$n_start_position)
hist(random_error$n_end_position)
hist(random_error$n_start_position)
hist(random_error$end_position)
hist(random_error$n_end_position)
boxplot(random_error$distance)
boxplot(random_error$distance~random_error$edge)
plot(random_error$n_end_position,random_error$distance,pch='.')
wilcox.test(distance~edge,data=random_error)
library(ggplot2)
ggplot(random_error,aes(x=edge,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("Misjoined haplotig","Random error haplotig"))+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
ggplot(random_error,aes(x=edge,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
ggplot(random_error,aes(x=edge,y=distance))+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
ggplot(random_error,aes(x=edge,y=distance))+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
ggplot(random_error,aes(x=edge,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("error at last SNPs","others")+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
#plot(random_error$V3,random_error$V4,pch='.')
model=lm(random_error$V4~random_error$V2)
abline(model)
summary(model)
loess_fit <- loess(random_error$V4~random_error$V2)
lines(random_error$V2, predict(loess_fit), col = "blue")
library(lattice)
panel_fn <- function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.xyplot(x, y, type="smooth", col="red", ...)
}
xyplot(random_error$V4 ~ random_error$V2,panel=panel_fn)
plot(mis_join$V2,mis_join$V4,pch='.')
ggplot(random_error,aes(x=edge,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("error at last SNPs","others"))+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
dataset=read.table('boundary_size_vs_location')
head(dataset)
colnames(dataset)=c('class','n_start_position','n_end_position','distance','norm_distance','edge')
random_error=dataset[dataset$class=='random_error',]
mis_join=dataset[dataset$class=='mis_join',]
plot(random_error$n_end_position,random_error$norm_distance,pch='.')
plot(random_error$n_end_position,random_error$distance,pch='.')
plot(random_error$n_end_position,random_error$distance,pch='.')
hist(random_error$n_end_position)
hist(random_error$n_start_position)
hist(random_error$n_end_position)
dataset=read.table('boundary_size_vs_location')
head(dataset)
colnames(dataset)=c('class','n_start_position','n_end_position','distance','norm_distance','edge')
random_error=dataset[dataset$class=='random_error',]
mis_join=dataset[dataset$class=='mis_join',]
plot(random_error$n_end_position,random_error$distance,pch='.')
plot(random_error$n_end_position,random_error$norm_distance,pch='.')
ggplot(dataset,aes(x=class,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
library(ggplot2)
ggplot(random_error,aes(x=edge,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("error at last SNPs","others"))+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
ggplot(dataset,aes(x=class,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
ggplot(random_error,aes(x=edge,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("error at last SNPs","others"))+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
plot(random_error$n_end_position,random_error$distance,pch='.')
hist(random_error$n_end_position)
hist(random_error$n_start_position)
boxplot(random_error$distance~random_error$edge)
ggplot(dataset,aes(x=class,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
dataset=read.table('box_plot_boundary_size')
library(ggplot2)
head(dataset)
colnames(dataset)=c('class','distance')
ggplot(dataset,aes(x=class,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
dataset=read.table('boundary_size_vs_location')
colnames(dataset)=c('class','n_start_position','n_end_position','distance','norm_distance','edge')
ggplot(dataset,aes(x=class,y=distance),log='y')+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
ggplot(dataset,aes(x=class,y=distance))+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
hist(random_error$n_end_position)
hist(random_error$n_start_position)
hist(mis_join$n_end_position)
hist(mis_join$n_start_position)
par(mfrow=c(2,2))
hist(mis_join$n_start_position,xlab=NULL,freq=F,breaks=20,main="Mis-joined haplotigs")
par(mfrow=c(2,1))
hist(mis_join$n_end_position,xlab=NULL,freq=F,breaks=20,main="Mis-joined haplotigs")
hist(random_error$n_end_position,xlab='Normalized coordinates',freq=F,breaks=20,main="Random error haplotigs")
summary(mis_join)
summary(random_error)
wilcox.test(distance~class,data=dataset)
IQR(mis_join$distance)
IQR(random_error$distance)
ansari.test(mis_join$distance, random_error$distance)
wilcox.test(distance~class,data=dataset)
ansari.test(mis_join$distance, random_error$distance)
IQR(mis_join$distance)
IQR(random_error$distance)
var.test(mis_join$distance, random_error$distance)
ggplot(dataset,aes(x=class,y=distance))+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("Misjoined haplotig","Random error haplotig"))+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
plot(random_error$n_end_position,random_error$distance,pch='.')
par(mfrow=c(1,1))
plot(random_error$n_end_position,random_error$distance,pch='.')
plot(random_error$n_end_position,random_error$norm_distance,pch='.')
boxplot(random_error$distance~random_error$edge)
wilcox.test(distance~edge,data=random_error)
ggplot(random_error,aes(x=edge,y=distance))+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("error at the last SNPs","others"))+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
library(ggplot2)
dataset=read.table('boundary_size_vs_location')
head(dataset)
colnames(dataset)=c('class','n_start_position','n_end_position','distance','norm_distance','edge')
random_error=dataset[dataset$class=='random_error',]
mis_join=dataset[dataset$class=='mis_join',]
library(ggplot2)
dataset=read.table('boundary_size_vs_location')
head(dataset)
colnames(dataset)=c('class','n_start_position','n_end_position','distance','norm_distance','edge')
random_error=dataset[dataset$class=='random_error',]
mis_join=dataset[dataset$class=='mis_join',]
ggplot(dataset,aes(x=class,y=distance))+geom_violin()+geom_boxplot(width=.12, fill=I('black'), notch=T, col='grey40')+ylab('SNPs distance at boundary region')+scale_x_discrete(labels=c("Misjoined haplotig","Random error haplotig"))+xlab(NULL)+coord_cartesian(ylim = c(0, 60000))
dataset=read.table('haplotig_evaluation_table',sep='\t')
library(scales)
lowset=dataset[dataset$V21=='low',]
lowset=dataset[dataset$V21=='low',]
highset=dataset[dataset$V21=='high',]
mediumset=data.frame(rbind(dataset[dataset$V21=='inbetween',],dataset[dataset$V21=='mix',]))
mixset=dataset[dataset$V21=='mix',]
inbetweenset=dataset[dataset$V21=='inbetween',]
pchvalue=16 #16
alphavalue=0.3
#
plot(mixset$V15,mixset$V6,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
lowset=dataset[dataset$phasing_type=='low',]
lowset=dataset[dataset$phasing_type=='low',]
highset=dataset[dataset$phasing_type=='high',]
mediumset=data.frame(rbind(dataset[dataset$phasing_type=='inbetween',],dataset[dataset$phasing_type=='mix',]))
mixset=dataset[datasetphasing_type=='mix',]
inbetweenset=dataset[dataset$phasing_type=='inbetween',]
dataset=read.table('haplotig_evaluation_table',sep='\t',header=True)
library(scales)
lowset=dataset[dataset$phasing_type=='low',]
lowset=dataset[dataset$phasing_type=='low',]
highset=dataset[dataset$phasing_type=='high',]
mediumset=data.frame(rbind(dataset[dataset$phasing_type=='inbetween',],dataset[dataset$phasing_type=='mix',]))
mixset=dataset[datasetphasing_type=='mix',]
inbetweenset=dataset[dataset$phasing_type=='inbetween',]
mixset=dataset[dataset$phasing_type=='mix',]
mixset
summary(dataset)
dataset=read.table('haplotig_evaluation_table',sep='\t',header=True)
dataset=read.table('haplotig_evaluation_table',sep='\t',header=T)
library(scales)
lowset=dataset[dataset$phasing_type=='low',]
lowset=dataset[dataset$phasing_type=='low',]
highset=dataset[dataset$phasing_type=='high',]
mediumset=data.frame(rbind(dataset[dataset$phasing_type=='inbetween',],dataset[dataset$phasing_type=='mix',]))
mixset=dataset[dataset$phasing_type=='mix',]
inbetweenset=dataset[dataset$phasing_type=='inbetween',]
pchvalue=16 #16
alphavalue=0.3
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
dataset=read.table('haplotig_evaluation_table',sep='\t',header=T)
library(scales)
lowset=dataset[dataset$phasing_type=='random_error',]
highset=dataset[dataset$phasing_type=='mis_join',]
mediumset=data.frame(rbind(dataset[dataset$phasing_type=='inbetween',],dataset[dataset$phasing_type=='mix',]))
mixset=dataset[dataset$phasing_type=='mix',]
inbetweenset=dataset[dataset$phasing_type=='inbetween',]
pchvalue=16 #16
alphavalue=0.3
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
dataset=read.table('haplotig_evaluation_table',sep='\t',header=T)
library(scales)
lowset=dataset[dataset$phasing_type=='random_error',]
highset=dataset[dataset$phasing_type=='mis_join',]
mediumset=data.frame(rbind(dataset[dataset$phasing_type=='inbetween',],dataset[dataset$phasing_type=='mix',]))
mixset=dataset[dataset$phasing_type=='mix',]
inbetweenset=dataset[dataset$phasing_type=='inbetween',]
pdf(paste('scatter_n_error_vs_switch_error','.pdf',sep=""))
#plot(mixset$V15,mixset$V6,xlab='number of mis-phased SNPs',ylab='switch error',pch=16,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50))
pchvalue=16 #16
alphavalue=0.3
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
dev.off()
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,20),cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,50),cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
plot(mixset$error_count,mixset$parent_switch_n,xlab='number of mis-phased SNPs',ylab='number of switch error',pch=pchvalue,col=alpha('magenta',alphavalue),type='p',xlim=c(0,430),ylim=c(0,30),cex=0.5)
lines(inbetweenset$error_count,inbetweenset$parent_switch_n,pch=pchvalue,col=alpha('green',alphavalue),type='p',cex=0.5)
lines(highset$error_count,highset$parent_switch_n,pch=pchvalue,col=alpha('blue',alphavalue),type='p',cex=0.5)
lines(lowset$error_count,lowset$parent_switch_n,pch=pchvalue,col=alpha('red',alphavalue),type='p',cex=0.5)
